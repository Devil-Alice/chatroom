// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: my_grpc.proto

#include "my_grpc.pb.h"
#include "my_grpc.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace my_grpc {

static const char* Verify_method_names[] = {
  "/my_grpc.Verify/get_verify_code",
};

std::unique_ptr< Verify::Stub> Verify::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Verify::Stub> stub(new Verify::Stub(channel, options));
  return stub;
}

Verify::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_get_verify_code_(Verify_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Verify::Stub::get_verify_code(::grpc::ClientContext* context, const ::my_grpc::GetVerifyRequest& request, ::my_grpc::GetVerifyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::my_grpc::GetVerifyRequest, ::my_grpc::GetVerifyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_verify_code_, context, request, response);
}

void Verify::Stub::async::get_verify_code(::grpc::ClientContext* context, const ::my_grpc::GetVerifyRequest* request, ::my_grpc::GetVerifyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::my_grpc::GetVerifyRequest, ::my_grpc::GetVerifyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_verify_code_, context, request, response, std::move(f));
}

void Verify::Stub::async::get_verify_code(::grpc::ClientContext* context, const ::my_grpc::GetVerifyRequest* request, ::my_grpc::GetVerifyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_verify_code_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::my_grpc::GetVerifyResponse>* Verify::Stub::PrepareAsyncget_verify_codeRaw(::grpc::ClientContext* context, const ::my_grpc::GetVerifyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::my_grpc::GetVerifyResponse, ::my_grpc::GetVerifyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_verify_code_, context, request);
}

::grpc::ClientAsyncResponseReader< ::my_grpc::GetVerifyResponse>* Verify::Stub::Asyncget_verify_codeRaw(::grpc::ClientContext* context, const ::my_grpc::GetVerifyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_verify_codeRaw(context, request, cq);
  result->StartCall();
  return result;
}

Verify::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Verify_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Verify::Service, ::my_grpc::GetVerifyRequest, ::my_grpc::GetVerifyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Verify::Service* service,
             ::grpc::ServerContext* ctx,
             const ::my_grpc::GetVerifyRequest* req,
             ::my_grpc::GetVerifyResponse* resp) {
               return service->get_verify_code(ctx, req, resp);
             }, this)));
}

Verify::Service::~Service() {
}

::grpc::Status Verify::Service::get_verify_code(::grpc::ServerContext* context, const ::my_grpc::GetVerifyRequest* request, ::my_grpc::GetVerifyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Status_method_names[] = {
  "/my_grpc.Status/get_chat_server",
  "/my_grpc.Status/chat_login",
};

std::unique_ptr< Status::Stub> Status::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Status::Stub> stub(new Status::Stub(channel, options));
  return stub;
}

Status::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_get_chat_server_(Status_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_chat_login_(Status_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Status::Stub::get_chat_server(::grpc::ClientContext* context, const ::my_grpc::GetChatServerRequest& request, ::my_grpc::GetChatServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::my_grpc::GetChatServerRequest, ::my_grpc::GetChatServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_chat_server_, context, request, response);
}

void Status::Stub::async::get_chat_server(::grpc::ClientContext* context, const ::my_grpc::GetChatServerRequest* request, ::my_grpc::GetChatServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::my_grpc::GetChatServerRequest, ::my_grpc::GetChatServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_chat_server_, context, request, response, std::move(f));
}

void Status::Stub::async::get_chat_server(::grpc::ClientContext* context, const ::my_grpc::GetChatServerRequest* request, ::my_grpc::GetChatServerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_chat_server_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::my_grpc::GetChatServerResponse>* Status::Stub::PrepareAsyncget_chat_serverRaw(::grpc::ClientContext* context, const ::my_grpc::GetChatServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::my_grpc::GetChatServerResponse, ::my_grpc::GetChatServerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_chat_server_, context, request);
}

::grpc::ClientAsyncResponseReader< ::my_grpc::GetChatServerResponse>* Status::Stub::Asyncget_chat_serverRaw(::grpc::ClientContext* context, const ::my_grpc::GetChatServerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_chat_serverRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Status::Stub::chat_login(::grpc::ClientContext* context, const ::my_grpc::UserLoginRequest& request, ::my_grpc::UserLoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::my_grpc::UserLoginRequest, ::my_grpc::UserLoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_chat_login_, context, request, response);
}

void Status::Stub::async::chat_login(::grpc::ClientContext* context, const ::my_grpc::UserLoginRequest* request, ::my_grpc::UserLoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::my_grpc::UserLoginRequest, ::my_grpc::UserLoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_chat_login_, context, request, response, std::move(f));
}

void Status::Stub::async::chat_login(::grpc::ClientContext* context, const ::my_grpc::UserLoginRequest* request, ::my_grpc::UserLoginResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_chat_login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::my_grpc::UserLoginResponse>* Status::Stub::PrepareAsyncchat_loginRaw(::grpc::ClientContext* context, const ::my_grpc::UserLoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::my_grpc::UserLoginResponse, ::my_grpc::UserLoginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_chat_login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::my_grpc::UserLoginResponse>* Status::Stub::Asyncchat_loginRaw(::grpc::ClientContext* context, const ::my_grpc::UserLoginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncchat_loginRaw(context, request, cq);
  result->StartCall();
  return result;
}

Status::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Status_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Status::Service, ::my_grpc::GetChatServerRequest, ::my_grpc::GetChatServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Status::Service* service,
             ::grpc::ServerContext* ctx,
             const ::my_grpc::GetChatServerRequest* req,
             ::my_grpc::GetChatServerResponse* resp) {
               return service->get_chat_server(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Status_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Status::Service, ::my_grpc::UserLoginRequest, ::my_grpc::UserLoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Status::Service* service,
             ::grpc::ServerContext* ctx,
             const ::my_grpc::UserLoginRequest* req,
             ::my_grpc::UserLoginResponse* resp) {
               return service->chat_login(ctx, req, resp);
             }, this)));
}

Status::Service::~Service() {
}

::grpc::Status Status::Service::get_chat_server(::grpc::ServerContext* context, const ::my_grpc::GetChatServerRequest* request, ::my_grpc::GetChatServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Status::Service::chat_login(::grpc::ServerContext* context, const ::my_grpc::UserLoginRequest* request, ::my_grpc::UserLoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Chat_method_names[] = {
  "/my_grpc.Chat/notify",
  "/my_grpc.Chat/notify_send_friend_apply",
  "/my_grpc.Chat/notify_handle_friend_apply",
};

std::unique_ptr< Chat::Stub> Chat::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Chat::Stub> stub(new Chat::Stub(channel, options));
  return stub;
}

Chat::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_notify_(Chat_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_notify_send_friend_apply_(Chat_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_notify_handle_friend_apply_(Chat_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Chat::Stub::notify(::grpc::ClientContext* context, const ::my_grpc::NotifyRequest& request, ::my_grpc::NotifyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::my_grpc::NotifyRequest, ::my_grpc::NotifyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_notify_, context, request, response);
}

void Chat::Stub::async::notify(::grpc::ClientContext* context, const ::my_grpc::NotifyRequest* request, ::my_grpc::NotifyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::my_grpc::NotifyRequest, ::my_grpc::NotifyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_notify_, context, request, response, std::move(f));
}

void Chat::Stub::async::notify(::grpc::ClientContext* context, const ::my_grpc::NotifyRequest* request, ::my_grpc::NotifyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_notify_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::my_grpc::NotifyResponse>* Chat::Stub::PrepareAsyncnotifyRaw(::grpc::ClientContext* context, const ::my_grpc::NotifyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::my_grpc::NotifyResponse, ::my_grpc::NotifyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_notify_, context, request);
}

::grpc::ClientAsyncResponseReader< ::my_grpc::NotifyResponse>* Chat::Stub::AsyncnotifyRaw(::grpc::ClientContext* context, const ::my_grpc::NotifyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncnotifyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Chat::Stub::notify_send_friend_apply(::grpc::ClientContext* context, const ::my_grpc::NotifySendFriendApplyRequest& request, ::my_grpc::NotifySendFriendApplyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::my_grpc::NotifySendFriendApplyRequest, ::my_grpc::NotifySendFriendApplyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_notify_send_friend_apply_, context, request, response);
}

void Chat::Stub::async::notify_send_friend_apply(::grpc::ClientContext* context, const ::my_grpc::NotifySendFriendApplyRequest* request, ::my_grpc::NotifySendFriendApplyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::my_grpc::NotifySendFriendApplyRequest, ::my_grpc::NotifySendFriendApplyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_notify_send_friend_apply_, context, request, response, std::move(f));
}

void Chat::Stub::async::notify_send_friend_apply(::grpc::ClientContext* context, const ::my_grpc::NotifySendFriendApplyRequest* request, ::my_grpc::NotifySendFriendApplyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_notify_send_friend_apply_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::my_grpc::NotifySendFriendApplyResponse>* Chat::Stub::PrepareAsyncnotify_send_friend_applyRaw(::grpc::ClientContext* context, const ::my_grpc::NotifySendFriendApplyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::my_grpc::NotifySendFriendApplyResponse, ::my_grpc::NotifySendFriendApplyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_notify_send_friend_apply_, context, request);
}

::grpc::ClientAsyncResponseReader< ::my_grpc::NotifySendFriendApplyResponse>* Chat::Stub::Asyncnotify_send_friend_applyRaw(::grpc::ClientContext* context, const ::my_grpc::NotifySendFriendApplyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncnotify_send_friend_applyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Chat::Stub::notify_handle_friend_apply(::grpc::ClientContext* context, const ::my_grpc::NotifyHandleFriendApplyRequest& request, ::my_grpc::NotifyHandleFriendApplyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::my_grpc::NotifyHandleFriendApplyRequest, ::my_grpc::NotifyHandleFriendApplyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_notify_handle_friend_apply_, context, request, response);
}

void Chat::Stub::async::notify_handle_friend_apply(::grpc::ClientContext* context, const ::my_grpc::NotifyHandleFriendApplyRequest* request, ::my_grpc::NotifyHandleFriendApplyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::my_grpc::NotifyHandleFriendApplyRequest, ::my_grpc::NotifyHandleFriendApplyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_notify_handle_friend_apply_, context, request, response, std::move(f));
}

void Chat::Stub::async::notify_handle_friend_apply(::grpc::ClientContext* context, const ::my_grpc::NotifyHandleFriendApplyRequest* request, ::my_grpc::NotifyHandleFriendApplyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_notify_handle_friend_apply_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::my_grpc::NotifyHandleFriendApplyResponse>* Chat::Stub::PrepareAsyncnotify_handle_friend_applyRaw(::grpc::ClientContext* context, const ::my_grpc::NotifyHandleFriendApplyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::my_grpc::NotifyHandleFriendApplyResponse, ::my_grpc::NotifyHandleFriendApplyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_notify_handle_friend_apply_, context, request);
}

::grpc::ClientAsyncResponseReader< ::my_grpc::NotifyHandleFriendApplyResponse>* Chat::Stub::Asyncnotify_handle_friend_applyRaw(::grpc::ClientContext* context, const ::my_grpc::NotifyHandleFriendApplyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncnotify_handle_friend_applyRaw(context, request, cq);
  result->StartCall();
  return result;
}

Chat::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Chat_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Chat::Service, ::my_grpc::NotifyRequest, ::my_grpc::NotifyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Chat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::my_grpc::NotifyRequest* req,
             ::my_grpc::NotifyResponse* resp) {
               return service->notify(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Chat_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Chat::Service, ::my_grpc::NotifySendFriendApplyRequest, ::my_grpc::NotifySendFriendApplyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Chat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::my_grpc::NotifySendFriendApplyRequest* req,
             ::my_grpc::NotifySendFriendApplyResponse* resp) {
               return service->notify_send_friend_apply(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Chat_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Chat::Service, ::my_grpc::NotifyHandleFriendApplyRequest, ::my_grpc::NotifyHandleFriendApplyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Chat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::my_grpc::NotifyHandleFriendApplyRequest* req,
             ::my_grpc::NotifyHandleFriendApplyResponse* resp) {
               return service->notify_handle_friend_apply(ctx, req, resp);
             }, this)));
}

Chat::Service::~Service() {
}

::grpc::Status Chat::Service::notify(::grpc::ServerContext* context, const ::my_grpc::NotifyRequest* request, ::my_grpc::NotifyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Chat::Service::notify_send_friend_apply(::grpc::ServerContext* context, const ::my_grpc::NotifySendFriendApplyRequest* request, ::my_grpc::NotifySendFriendApplyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Chat::Service::notify_handle_friend_apply(::grpc::ServerContext* context, const ::my_grpc::NotifyHandleFriendApplyRequest* request, ::my_grpc::NotifyHandleFriendApplyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace my_grpc

