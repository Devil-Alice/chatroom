// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: my_grpc.proto
// Original file comments:
// proto 协议版本
#ifndef GRPC_my_5fgrpc_2eproto__INCLUDED
#define GRPC_my_5fgrpc_2eproto__INCLUDED

#include "my_grpc.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace my_grpc {

// 获取验证码服务以及对象的proto代码---------------------------------------------------------
//
// service 用于定义 RPC（远程过程调用）服务。RPC 是一种协议，用于允许客户端和服务器之间进行通信
// Verify 是服务的名称，表示这是一个名为 Verify 的服务
class Verify final {
 public:
  static constexpr char const* service_full_name() {
    return "my_grpc.Verify";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // rpc 表示你要定义一个服务端的接口方法，客户端可以调用这个方法来请求服务。通过 rpc 定义的函数是异步的、网络通信的函数，客户端通过这些 RPC 方法与服务器进行交互
    // 这句表示定义了一个方法 get_verify_code，它接受一个 GetVerifyRequest 类型的请求，并返回一个 GetVerifyResponse 类型的响应
    virtual ::grpc::Status get_verify_code(::grpc::ClientContext* context, const ::my_grpc::GetVerifyRequest& request, ::my_grpc::GetVerifyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::my_grpc::GetVerifyResponse>> Asyncget_verify_code(::grpc::ClientContext* context, const ::my_grpc::GetVerifyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::my_grpc::GetVerifyResponse>>(Asyncget_verify_codeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::my_grpc::GetVerifyResponse>> PrepareAsyncget_verify_code(::grpc::ClientContext* context, const ::my_grpc::GetVerifyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::my_grpc::GetVerifyResponse>>(PrepareAsyncget_verify_codeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // rpc 表示你要定义一个服务端的接口方法，客户端可以调用这个方法来请求服务。通过 rpc 定义的函数是异步的、网络通信的函数，客户端通过这些 RPC 方法与服务器进行交互
      // 这句表示定义了一个方法 get_verify_code，它接受一个 GetVerifyRequest 类型的请求，并返回一个 GetVerifyResponse 类型的响应
      virtual void get_verify_code(::grpc::ClientContext* context, const ::my_grpc::GetVerifyRequest* request, ::my_grpc::GetVerifyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void get_verify_code(::grpc::ClientContext* context, const ::my_grpc::GetVerifyRequest* request, ::my_grpc::GetVerifyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::my_grpc::GetVerifyResponse>* Asyncget_verify_codeRaw(::grpc::ClientContext* context, const ::my_grpc::GetVerifyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::my_grpc::GetVerifyResponse>* PrepareAsyncget_verify_codeRaw(::grpc::ClientContext* context, const ::my_grpc::GetVerifyRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status get_verify_code(::grpc::ClientContext* context, const ::my_grpc::GetVerifyRequest& request, ::my_grpc::GetVerifyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::my_grpc::GetVerifyResponse>> Asyncget_verify_code(::grpc::ClientContext* context, const ::my_grpc::GetVerifyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::my_grpc::GetVerifyResponse>>(Asyncget_verify_codeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::my_grpc::GetVerifyResponse>> PrepareAsyncget_verify_code(::grpc::ClientContext* context, const ::my_grpc::GetVerifyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::my_grpc::GetVerifyResponse>>(PrepareAsyncget_verify_codeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void get_verify_code(::grpc::ClientContext* context, const ::my_grpc::GetVerifyRequest* request, ::my_grpc::GetVerifyResponse* response, std::function<void(::grpc::Status)>) override;
      void get_verify_code(::grpc::ClientContext* context, const ::my_grpc::GetVerifyRequest* request, ::my_grpc::GetVerifyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::my_grpc::GetVerifyResponse>* Asyncget_verify_codeRaw(::grpc::ClientContext* context, const ::my_grpc::GetVerifyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::my_grpc::GetVerifyResponse>* PrepareAsyncget_verify_codeRaw(::grpc::ClientContext* context, const ::my_grpc::GetVerifyRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_get_verify_code_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // rpc 表示你要定义一个服务端的接口方法，客户端可以调用这个方法来请求服务。通过 rpc 定义的函数是异步的、网络通信的函数，客户端通过这些 RPC 方法与服务器进行交互
    // 这句表示定义了一个方法 get_verify_code，它接受一个 GetVerifyRequest 类型的请求，并返回一个 GetVerifyResponse 类型的响应
    virtual ::grpc::Status get_verify_code(::grpc::ServerContext* context, const ::my_grpc::GetVerifyRequest* request, ::my_grpc::GetVerifyResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_get_verify_code : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_get_verify_code() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_get_verify_code() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_verify_code(::grpc::ServerContext* /*context*/, const ::my_grpc::GetVerifyRequest* /*request*/, ::my_grpc::GetVerifyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_verify_code(::grpc::ServerContext* context, ::my_grpc::GetVerifyRequest* request, ::grpc::ServerAsyncResponseWriter< ::my_grpc::GetVerifyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_get_verify_code<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_get_verify_code : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_get_verify_code() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::my_grpc::GetVerifyRequest, ::my_grpc::GetVerifyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::my_grpc::GetVerifyRequest* request, ::my_grpc::GetVerifyResponse* response) { return this->get_verify_code(context, request, response); }));}
    void SetMessageAllocatorFor_get_verify_code(
        ::grpc::MessageAllocator< ::my_grpc::GetVerifyRequest, ::my_grpc::GetVerifyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::my_grpc::GetVerifyRequest, ::my_grpc::GetVerifyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_get_verify_code() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_verify_code(::grpc::ServerContext* /*context*/, const ::my_grpc::GetVerifyRequest* /*request*/, ::my_grpc::GetVerifyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get_verify_code(
      ::grpc::CallbackServerContext* /*context*/, const ::my_grpc::GetVerifyRequest* /*request*/, ::my_grpc::GetVerifyResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_get_verify_code<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_get_verify_code : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_get_verify_code() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_get_verify_code() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_verify_code(::grpc::ServerContext* /*context*/, const ::my_grpc::GetVerifyRequest* /*request*/, ::my_grpc::GetVerifyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_get_verify_code : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_get_verify_code() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_get_verify_code() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_verify_code(::grpc::ServerContext* /*context*/, const ::my_grpc::GetVerifyRequest* /*request*/, ::my_grpc::GetVerifyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_verify_code(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_get_verify_code : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_get_verify_code() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->get_verify_code(context, request, response); }));
    }
    ~WithRawCallbackMethod_get_verify_code() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_verify_code(::grpc::ServerContext* /*context*/, const ::my_grpc::GetVerifyRequest* /*request*/, ::my_grpc::GetVerifyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get_verify_code(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get_verify_code : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_get_verify_code() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::my_grpc::GetVerifyRequest, ::my_grpc::GetVerifyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::my_grpc::GetVerifyRequest, ::my_grpc::GetVerifyResponse>* streamer) {
                       return this->Streamedget_verify_code(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_get_verify_code() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get_verify_code(::grpc::ServerContext* /*context*/, const ::my_grpc::GetVerifyRequest* /*request*/, ::my_grpc::GetVerifyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget_verify_code(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::my_grpc::GetVerifyRequest,::my_grpc::GetVerifyResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_get_verify_code<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_get_verify_code<Service > StreamedService;
};

class Status final {
 public:
  static constexpr char const* service_full_name() {
    return "my_grpc.Status";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status get_chat_server(::grpc::ClientContext* context, const ::my_grpc::GetChatServerRequest& request, ::my_grpc::GetChatServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::my_grpc::GetChatServerResponse>> Asyncget_chat_server(::grpc::ClientContext* context, const ::my_grpc::GetChatServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::my_grpc::GetChatServerResponse>>(Asyncget_chat_serverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::my_grpc::GetChatServerResponse>> PrepareAsyncget_chat_server(::grpc::ClientContext* context, const ::my_grpc::GetChatServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::my_grpc::GetChatServerResponse>>(PrepareAsyncget_chat_serverRaw(context, request, cq));
    }
    virtual ::grpc::Status user_login(::grpc::ClientContext* context, const ::my_grpc::UserLoginRequest& request, ::my_grpc::UserLoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::my_grpc::UserLoginResponse>> Asyncuser_login(::grpc::ClientContext* context, const ::my_grpc::UserLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::my_grpc::UserLoginResponse>>(Asyncuser_loginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::my_grpc::UserLoginResponse>> PrepareAsyncuser_login(::grpc::ClientContext* context, const ::my_grpc::UserLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::my_grpc::UserLoginResponse>>(PrepareAsyncuser_loginRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void get_chat_server(::grpc::ClientContext* context, const ::my_grpc::GetChatServerRequest* request, ::my_grpc::GetChatServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void get_chat_server(::grpc::ClientContext* context, const ::my_grpc::GetChatServerRequest* request, ::my_grpc::GetChatServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void user_login(::grpc::ClientContext* context, const ::my_grpc::UserLoginRequest* request, ::my_grpc::UserLoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void user_login(::grpc::ClientContext* context, const ::my_grpc::UserLoginRequest* request, ::my_grpc::UserLoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::my_grpc::GetChatServerResponse>* Asyncget_chat_serverRaw(::grpc::ClientContext* context, const ::my_grpc::GetChatServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::my_grpc::GetChatServerResponse>* PrepareAsyncget_chat_serverRaw(::grpc::ClientContext* context, const ::my_grpc::GetChatServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::my_grpc::UserLoginResponse>* Asyncuser_loginRaw(::grpc::ClientContext* context, const ::my_grpc::UserLoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::my_grpc::UserLoginResponse>* PrepareAsyncuser_loginRaw(::grpc::ClientContext* context, const ::my_grpc::UserLoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status get_chat_server(::grpc::ClientContext* context, const ::my_grpc::GetChatServerRequest& request, ::my_grpc::GetChatServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::my_grpc::GetChatServerResponse>> Asyncget_chat_server(::grpc::ClientContext* context, const ::my_grpc::GetChatServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::my_grpc::GetChatServerResponse>>(Asyncget_chat_serverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::my_grpc::GetChatServerResponse>> PrepareAsyncget_chat_server(::grpc::ClientContext* context, const ::my_grpc::GetChatServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::my_grpc::GetChatServerResponse>>(PrepareAsyncget_chat_serverRaw(context, request, cq));
    }
    ::grpc::Status user_login(::grpc::ClientContext* context, const ::my_grpc::UserLoginRequest& request, ::my_grpc::UserLoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::my_grpc::UserLoginResponse>> Asyncuser_login(::grpc::ClientContext* context, const ::my_grpc::UserLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::my_grpc::UserLoginResponse>>(Asyncuser_loginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::my_grpc::UserLoginResponse>> PrepareAsyncuser_login(::grpc::ClientContext* context, const ::my_grpc::UserLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::my_grpc::UserLoginResponse>>(PrepareAsyncuser_loginRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void get_chat_server(::grpc::ClientContext* context, const ::my_grpc::GetChatServerRequest* request, ::my_grpc::GetChatServerResponse* response, std::function<void(::grpc::Status)>) override;
      void get_chat_server(::grpc::ClientContext* context, const ::my_grpc::GetChatServerRequest* request, ::my_grpc::GetChatServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void user_login(::grpc::ClientContext* context, const ::my_grpc::UserLoginRequest* request, ::my_grpc::UserLoginResponse* response, std::function<void(::grpc::Status)>) override;
      void user_login(::grpc::ClientContext* context, const ::my_grpc::UserLoginRequest* request, ::my_grpc::UserLoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::my_grpc::GetChatServerResponse>* Asyncget_chat_serverRaw(::grpc::ClientContext* context, const ::my_grpc::GetChatServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::my_grpc::GetChatServerResponse>* PrepareAsyncget_chat_serverRaw(::grpc::ClientContext* context, const ::my_grpc::GetChatServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::my_grpc::UserLoginResponse>* Asyncuser_loginRaw(::grpc::ClientContext* context, const ::my_grpc::UserLoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::my_grpc::UserLoginResponse>* PrepareAsyncuser_loginRaw(::grpc::ClientContext* context, const ::my_grpc::UserLoginRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_get_chat_server_;
    const ::grpc::internal::RpcMethod rpcmethod_user_login_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status get_chat_server(::grpc::ServerContext* context, const ::my_grpc::GetChatServerRequest* request, ::my_grpc::GetChatServerResponse* response);
    virtual ::grpc::Status user_login(::grpc::ServerContext* context, const ::my_grpc::UserLoginRequest* request, ::my_grpc::UserLoginResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_get_chat_server : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_get_chat_server() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_get_chat_server() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_chat_server(::grpc::ServerContext* /*context*/, const ::my_grpc::GetChatServerRequest* /*request*/, ::my_grpc::GetChatServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_chat_server(::grpc::ServerContext* context, ::my_grpc::GetChatServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::my_grpc::GetChatServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_user_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_user_login() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_user_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status user_login(::grpc::ServerContext* /*context*/, const ::my_grpc::UserLoginRequest* /*request*/, ::my_grpc::UserLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestuser_login(::grpc::ServerContext* context, ::my_grpc::UserLoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::my_grpc::UserLoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_get_chat_server<WithAsyncMethod_user_login<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_get_chat_server : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_get_chat_server() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::my_grpc::GetChatServerRequest, ::my_grpc::GetChatServerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::my_grpc::GetChatServerRequest* request, ::my_grpc::GetChatServerResponse* response) { return this->get_chat_server(context, request, response); }));}
    void SetMessageAllocatorFor_get_chat_server(
        ::grpc::MessageAllocator< ::my_grpc::GetChatServerRequest, ::my_grpc::GetChatServerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::my_grpc::GetChatServerRequest, ::my_grpc::GetChatServerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_get_chat_server() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_chat_server(::grpc::ServerContext* /*context*/, const ::my_grpc::GetChatServerRequest* /*request*/, ::my_grpc::GetChatServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get_chat_server(
      ::grpc::CallbackServerContext* /*context*/, const ::my_grpc::GetChatServerRequest* /*request*/, ::my_grpc::GetChatServerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_user_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_user_login() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::my_grpc::UserLoginRequest, ::my_grpc::UserLoginResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::my_grpc::UserLoginRequest* request, ::my_grpc::UserLoginResponse* response) { return this->user_login(context, request, response); }));}
    void SetMessageAllocatorFor_user_login(
        ::grpc::MessageAllocator< ::my_grpc::UserLoginRequest, ::my_grpc::UserLoginResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::my_grpc::UserLoginRequest, ::my_grpc::UserLoginResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_user_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status user_login(::grpc::ServerContext* /*context*/, const ::my_grpc::UserLoginRequest* /*request*/, ::my_grpc::UserLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* user_login(
      ::grpc::CallbackServerContext* /*context*/, const ::my_grpc::UserLoginRequest* /*request*/, ::my_grpc::UserLoginResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_get_chat_server<WithCallbackMethod_user_login<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_get_chat_server : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_get_chat_server() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_get_chat_server() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_chat_server(::grpc::ServerContext* /*context*/, const ::my_grpc::GetChatServerRequest* /*request*/, ::my_grpc::GetChatServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_user_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_user_login() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_user_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status user_login(::grpc::ServerContext* /*context*/, const ::my_grpc::UserLoginRequest* /*request*/, ::my_grpc::UserLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_get_chat_server : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_get_chat_server() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_get_chat_server() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_chat_server(::grpc::ServerContext* /*context*/, const ::my_grpc::GetChatServerRequest* /*request*/, ::my_grpc::GetChatServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_chat_server(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_user_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_user_login() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_user_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status user_login(::grpc::ServerContext* /*context*/, const ::my_grpc::UserLoginRequest* /*request*/, ::my_grpc::UserLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestuser_login(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_get_chat_server : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_get_chat_server() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->get_chat_server(context, request, response); }));
    }
    ~WithRawCallbackMethod_get_chat_server() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_chat_server(::grpc::ServerContext* /*context*/, const ::my_grpc::GetChatServerRequest* /*request*/, ::my_grpc::GetChatServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get_chat_server(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_user_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_user_login() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->user_login(context, request, response); }));
    }
    ~WithRawCallbackMethod_user_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status user_login(::grpc::ServerContext* /*context*/, const ::my_grpc::UserLoginRequest* /*request*/, ::my_grpc::UserLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* user_login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get_chat_server : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_get_chat_server() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::my_grpc::GetChatServerRequest, ::my_grpc::GetChatServerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::my_grpc::GetChatServerRequest, ::my_grpc::GetChatServerResponse>* streamer) {
                       return this->Streamedget_chat_server(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_get_chat_server() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get_chat_server(::grpc::ServerContext* /*context*/, const ::my_grpc::GetChatServerRequest* /*request*/, ::my_grpc::GetChatServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget_chat_server(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::my_grpc::GetChatServerRequest,::my_grpc::GetChatServerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_user_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_user_login() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::my_grpc::UserLoginRequest, ::my_grpc::UserLoginResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::my_grpc::UserLoginRequest, ::my_grpc::UserLoginResponse>* streamer) {
                       return this->Streameduser_login(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_user_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status user_login(::grpc::ServerContext* /*context*/, const ::my_grpc::UserLoginRequest* /*request*/, ::my_grpc::UserLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameduser_login(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::my_grpc::UserLoginRequest,::my_grpc::UserLoginResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_get_chat_server<WithStreamedUnaryMethod_user_login<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_get_chat_server<WithStreamedUnaryMethod_user_login<Service > > StreamedService;
};

}  // namespace my_grpc


#endif  // GRPC_my_5fgrpc_2eproto__INCLUDED
